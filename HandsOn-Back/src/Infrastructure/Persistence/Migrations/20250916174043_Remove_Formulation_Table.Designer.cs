// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250916174043_Remove_Formulation_Table")]
    partial class Remove_Formulation_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Analise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DadosAnalise")
                        .HasColumnType("LONGTEXT");

                    b.Property<DateOnly>("DataAnalise")
                        .HasColumnType("date");

                    b.Property<string>("Lab")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Propriedade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Proprietario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Tipo")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Analise");
                });

            modelBuilder.Entity("Core.Entities.Culture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Cultures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a3a7b72-2b6a-4b7e-b8d2-3b8d6f6e8a3a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Café",
                            NormalizedName = "cafe",
                            UpdatedAt = new DateTime(2025, 9, 16, 14, 40, 43, 374, DateTimeKind.Local).AddTicks(7357)
                        });
                });

            modelBuilder.Entity("Core.Entities.FertilizerTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("char(36)");

                    b.Property<float>("ExpectedBasesSaturation")
                        .HasColumnType("float");

                    b.Property<string>("LeafParameters")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SoilParameters")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Standard")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("UserId");

                    b.ToTable("FertilizerTables");
                });

            modelBuilder.Entity("Core.Entities.NutrientTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<string>("LeafData")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("SoilData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Standard")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("UserId");

                    b.ToTable("NutrientTables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b28c4809-f53e-49af-a6c4-0657610b603b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CultureId = new Guid("8a3a7b72-2b6a-4b7e-b8d2-3b8d6f6e8a3a"),
                            Division = 0,
                            LeafData = "[{\"NutrientColumns\":[{\"Header\":0,\"Inverted\":false,\"Min\":28,\"Med1\":0,\"Med2\":0,\"Max\":31},{\"Header\":1,\"Inverted\":false,\"Min\":1.7,\"Med1\":0,\"Med2\":0,\"Max\":1.9},{\"Header\":2,\"Inverted\":false,\"Min\":22,\"Med1\":0,\"Med2\":0,\"Max\":25},{\"Header\":3,\"Inverted\":false,\"Min\":10,\"Med1\":0,\"Med2\":0,\"Max\":13},{\"Header\":4,\"Inverted\":false,\"Min\":2.7,\"Med1\":0,\"Med2\":0,\"Max\":3.5},{\"Header\":5,\"Inverted\":false,\"Min\":1.8,\"Med1\":0,\"Med2\":0,\"Max\":2.3},{\"Header\":6,\"Inverted\":false,\"Min\":10,\"Med1\":0,\"Med2\":0,\"Max\":20},{\"Header\":7,\"Inverted\":false,\"Min\":50,\"Med1\":0,\"Med2\":0,\"Max\":60},{\"Header\":8,\"Inverted\":false,\"Min\":10,\"Med1\":0,\"Med2\":0,\"Max\":15},{\"Header\":9,\"Inverted\":false,\"Min\":100,\"Med1\":0,\"Med2\":0,\"Max\":150},{\"Header\":10,\"Inverted\":false,\"Min\":120,\"Med1\":0,\"Med2\":0,\"Max\":200},{\"Header\":11,\"Inverted\":false,\"Min\":15,\"Med1\":0,\"Med2\":0,\"Max\":18},{\"Header\":12,\"Inverted\":false,\"Min\":1.1,\"Med1\":0,\"Med2\":0,\"Max\":1.4},{\"Header\":13,\"Inverted\":false,\"Min\":12,\"Med1\":0,\"Med2\":0,\"Max\":17},{\"Header\":14,\"Inverted\":false,\"Min\":467,\"Med1\":0,\"Med2\":0,\"Max\":620},{\"Header\":15,\"Inverted\":false,\"Min\":1867,\"Med1\":0,\"Med2\":0,\"Max\":3100},{\"Header\":16,\"Inverted\":false,\"Min\":0.5,\"Med1\":0,\"Med2\":0,\"Max\":0.7},{\"Header\":17,\"Inverted\":false,\"Min\":85,\"Med1\":0,\"Med2\":0,\"Max\":190},{\"Header\":18,\"Inverted\":false,\"Min\":1.7,\"Med1\":0,\"Med2\":0,\"Max\":2.5},{\"Header\":19,\"Inverted\":false,\"Min\":6,\"Med1\":0,\"Med2\":0,\"Max\":9},{\"Header\":20,\"Inverted\":false,\"Min\":146,\"Med1\":0,\"Med2\":0,\"Max\":250},{\"Header\":21,\"Inverted\":false,\"Min\":2.8,\"Med1\":0,\"Med2\":0,\"Max\":4.8},{\"Header\":22,\"Inverted\":false,\"Min\":67,\"Med1\":0,\"Med2\":0,\"Max\":130},{\"Header\":23,\"Inverted\":false,\"Min\":0.8,\"Med1\":0,\"Med2\":0,\"Max\":2}]}]",
                            SoilData = "{\"NutrientColumns\":[{\"Header\":1,\"Inverted\":false,\"Min\":10,\"Med1\":0,\"Med2\":0,\"Max\":30},{\"Header\":2,\"Inverted\":false,\"Min\":0.15,\"Med1\":0,\"Med2\":0,\"Max\":0.3},{\"Header\":3,\"Inverted\":false,\"Min\":2,\"Med1\":0,\"Med2\":0,\"Max\":5},{\"Header\":4,\"Inverted\":false,\"Min\":0.5,\"Med1\":0,\"Med2\":0,\"Max\":1.5},{\"Header\":5,\"Inverted\":false,\"Min\":5,\"Med1\":0,\"Med2\":0,\"Max\":20},{\"Header\":6,\"Inverted\":false,\"Min\":2,\"Med1\":0,\"Med2\":0,\"Max\":6},{\"Header\":7,\"Inverted\":false,\"Min\":0.5,\"Med1\":0,\"Med2\":0,\"Max\":2},{\"Header\":8,\"Inverted\":false,\"Min\":0.5,\"Med1\":0,\"Med2\":0,\"Max\":10},{\"Header\":9,\"Inverted\":false,\"Min\":10,\"Med1\":0,\"Med2\":0,\"Max\":100},{\"Header\":10,\"Inverted\":false,\"Min\":10,\"Med1\":0,\"Med2\":0,\"Max\":40},{\"Header\":24,\"Inverted\":false,\"Min\":5,\"Med1\":0,\"Med2\":0,\"Max\":6.5},{\"Header\":25,\"Inverted\":true,\"Min\":0.2,\"Med1\":0.5,\"Med2\":1,\"Max\":2},{\"Header\":26,\"Inverted\":true,\"Min\":1,\"Med1\":2.5,\"Med2\":5,\"Max\":9},{\"Header\":27,\"Inverted\":false,\"Min\":0.7,\"Med1\":2,\"Med2\":4,\"Max\":7},{\"Header\":28,\"Inverted\":false,\"Min\":0.6,\"Med1\":1.8,\"Med2\":3.6,\"Max\":6},{\"Header\":29,\"Inverted\":false,\"Min\":1.6,\"Med1\":4.3,\"Med2\":8.6,\"Max\":15},{\"Header\":30,\"Inverted\":false,\"Min\":20,\"Med1\":40,\"Med2\":60,\"Max\":80}]}",
                            Standard = true,
                            UpdatedAt = new DateTime(2025, 9, 16, 14, 40, 43, 400, DateTimeKind.Local).AddTicks(121),
                            UserId = new Guid("16a10ead-a813-4e89-9d4e-d060ae56cff6")
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16a10ead-a813-4e89-9d4e-d060ae56cff6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "649e87aa-4f44-4b13-8adf-e6f7e4e50e0b",
                            CreatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(4997),
                            Email = "example1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE1@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "$2a$11$VFfd6uelS9JJOzneFaO0cOSGJLIBBYNZCwfPlMQRzSGNJn0EWiFp.",
                            PhoneNumber = "(99) 99999-9991",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b952288e-79f9-4273-b759-2d10efe65028",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(3520),
                            UserName = "john"
                        },
                        new
                        {
                            Id = new Guid("6c94fd03-9209-467c-bcea-054bd3d3dcb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13df6570-cf04-4f88-885c-b538b8eb4db8",
                            CreatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5206),
                            Email = "example2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE2@GMAIL.COM",
                            NormalizedUserName = "JANE",
                            PasswordHash = "$2a$11$.NwaSndKVdkmBwACYZiLx.FNLoqIHHmmveqNlKR1Do3SEDuqOkLmu",
                            PhoneNumber = "(99) 99999-9992",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcc93397-3d3b-45f7-8fae-4d71ca9ac7e3",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5194),
                            UserName = "jane"
                        },
                        new
                        {
                            Id = new Guid("154bbe52-b7ea-4947-80f8-6ef4ed020ba6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bf6993d-c163-4dc6-938e-9996e1dc08e9",
                            CreatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5211),
                            Email = "example3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE3@GMAIL.COM",
                            NormalizedUserName = "ALICE",
                            PasswordHash = "$2a$11$y1YI1tCm3yAMnEUq2k1KgujtgYMtsVQz2Ejhsxo8hB52Brf8.fSk.",
                            PhoneNumber = "(99) 99999-9993",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19c25854-f091-4d37-a79e-4b4bde42291a",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5207),
                            UserName = "alice"
                        },
                        new
                        {
                            Id = new Guid("b5895243-d687-4e89-9cc2-4a3ffc72c532"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77bbcf8d-1459-4208-a979-493208a83bae",
                            CreatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5218),
                            Email = "example4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE4@GMAIL.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "$2a$11$BhlFjI91bkPFzNTNASCWVeTv7thgA5Mk1WCXJ5/OCOUTSP/7m4.le",
                            PhoneNumber = "(99) 99999-9994",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d24bbe1-fa4a-4252-9edc-5fa381c4cfe6",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5211),
                            UserName = "bob"
                        },
                        new
                        {
                            Id = new Guid("d3d86045-ddbb-4aad-8d51-c35461e86f08"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f742b26-3e0e-4dab-9daa-3f08497b7a02",
                            CreatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5233),
                            Email = "example5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE5@GMAIL.COM",
                            NormalizedUserName = "CHARLIE",
                            PasswordHash = "$2a$11$sZRQJ3dk1lMBKgMxFuDSr.El5y.TewJ.rlPITAe/vfaRJek0F1FXG",
                            PhoneNumber = "(99) 99999-9995",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48a082f9-ba06-454b-b415-867521ea959c",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 9, 16, 14, 40, 42, 596, DateTimeKind.Local).AddTicks(5219),
                            UserName = "charlie"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dea767c8-d342-4ccf-b0cf-36e9fb7f9046"),
                            ConcurrencyStamp = "c559869d-2252-4c80-8507-7a5b1b848295",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6480bf68-9446-479b-91e2-7c81fca7c717"),
                            ConcurrencyStamp = "232c8ed8-aa50-4de1-90c0-ad3476a3c198",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("2c547307-3ff0-41a9-afb2-79fb41486676"),
                            ConcurrencyStamp = "8fdcceb6-260c-40c2-9e9d-3b0100d33862",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        },
                        new
                        {
                            Id = new Guid("cbe5ed86-88b3-466d-a1c3-bf88cbcdca64"),
                            ConcurrencyStamp = "f135f641-ce9d-4211-b431-219da96bf12c",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("66aae01c-cf36-4826-9c55-1a29cfc14023"),
                            ConcurrencyStamp = "47cc96df-4a3c-437e-942e-4f65e6b46869",
                            Name = "Collaborator",
                            NormalizedName = "COLLABORATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("16a10ead-a813-4e89-9d4e-d060ae56cff6"),
                            RoleId = new Guid("dea767c8-d342-4ccf-b0cf-36e9fb7f9046")
                        },
                        new
                        {
                            UserId = new Guid("6c94fd03-9209-467c-bcea-054bd3d3dcb8"),
                            RoleId = new Guid("6480bf68-9446-479b-91e2-7c81fca7c717")
                        },
                        new
                        {
                            UserId = new Guid("154bbe52-b7ea-4947-80f8-6ef4ed020ba6"),
                            RoleId = new Guid("2c547307-3ff0-41a9-afb2-79fb41486676")
                        },
                        new
                        {
                            UserId = new Guid("b5895243-d687-4e89-9cc2-4a3ffc72c532"),
                            RoleId = new Guid("cbe5ed86-88b3-466d-a1c3-bf88cbcdca64")
                        },
                        new
                        {
                            UserId = new Guid("d3d86045-ddbb-4aad-8d51-c35461e86f08"),
                            RoleId = new Guid("66aae01c-cf36-4826-9c55-1a29cfc14023")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Analise", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.FertilizerTable", b =>
                {
                    b.HasOne("Core.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.NutrientTable", b =>
                {
                    b.HasOne("Core.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
