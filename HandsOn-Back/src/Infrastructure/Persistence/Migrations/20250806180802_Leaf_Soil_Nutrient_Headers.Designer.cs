// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20250806180802_Leaf_Soil_Nutrient_Headers")]
    partial class Leaf_Soil_Nutrient_Headers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Analise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DadosAnalise")
                        .HasColumnType("LONGTEXT");

                    b.Property<DateOnly>("DataAnalise")
                        .HasColumnType("date");

                    b.Property<string>("Lab")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Propriedade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Proprietario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Tipo")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Analise");
                });

            modelBuilder.Entity("Core.Entities.Culture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Cultures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a3a7b72-2b6a-4b7e-b8d2-3b8d6f6e8a3a"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Café",
                            NormalizedName = "cafe",
                            UpdatedAt = new DateTime(2025, 8, 6, 15, 8, 2, 190, DateTimeKind.Local).AddTicks(9462)
                        });
                });

            modelBuilder.Entity("Core.Entities.Harvest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AnoAgricola")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cultura")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DataPlantio")
                        .HasColumnType("date");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PlotId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProducaoEsperada")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PlotId");

                    b.ToTable("Harvest");
                });

            modelBuilder.Entity("Core.Entities.NutrientTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Division")
                        .HasColumnType("int");

                    b.Property<string>("LeafData")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SoilData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Standard")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.HasIndex("UserId");

                    b.ToTable("NutrientTables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5601dd2-8818-489f-a54a-8a3d8825560c"),
                            CreatedAt = new DateTime(2025, 8, 6, 18, 8, 2, 219, DateTimeKind.Utc).AddTicks(5759),
                            CultureId = new Guid("8a3a7b72-2b6a-4b7e-b8d2-3b8d6f6e8a3a"),
                            Division = 0,
                            LeafData = "{\"LeafNutrientRows\":[{\"LeafNutrientColumns\":[{\"Header\":6,\"Min\":15,\"Max\":25},{\"Header\":9,\"Min\":20,\"Max\":30},{\"Header\":8,\"Min\":15,\"Max\":25},{\"Header\":10,\"Min\":20,\"Max\":30},{\"Header\":7,\"Min\":25,\"Max\":40}]}],\"SoilNutrientRow\":{\"SoilNutrientColumns\":[]}}",
                            Name = "Tabela FE - Alta Eficiência",
                            SoilData = "",
                            Standard = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 8, 6, 18, 8, 2, 219, DateTimeKind.Utc).AddTicks(5928),
                            UserId = new Guid("f9d37fbd-8af5-42b3-9a5e-f2026f34fc79")
                        },
                        new
                        {
                            Id = new Guid("4d78b928-8bcf-4e01-87e6-4beae619ffd0"),
                            CreatedAt = new DateTime(2025, 8, 6, 18, 8, 2, 219, DateTimeKind.Utc).AddTicks(7049),
                            CultureId = new Guid("8a3a7b72-2b6a-4b7e-b8d2-3b8d6f6e8a3a"),
                            Division = 0,
                            LeafData = "{\"LeafNutrientRows\":[{\"LeafNutrientColumns\":[{\"Header\":6,\"Min\":8,\"Max\":12},{\"Header\":9,\"Min\":10,\"Max\":15},{\"Header\":8,\"Min\":8,\"Max\":12},{\"Header\":10,\"Min\":0,\"Max\":5},{\"Header\":7,\"Min\":15,\"Max\":25}]}],\"SoilNutrientRow\":{\"SoilNutrientColumns\":[]}}",
                            Name = "Tabela FE - Fontes Padrão",
                            SoilData = "",
                            Standard = true,
                            Type = 1,
                            UpdatedAt = new DateTime(2025, 8, 6, 18, 8, 2, 219, DateTimeKind.Utc).AddTicks(7050),
                            UserId = new Guid("f9d37fbd-8af5-42b3-9a5e-f2026f34fc79")
                        });
                });

            modelBuilder.Entity("Core.Entities.Plot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Coordenadas")
                        .IsRequired()
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Plot");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9d37fbd-8af5-42b3-9a5e-f2026f34fc79"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed892256-9d79-4256-9474-5845c9dfe60f",
                            CreatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7504),
                            Email = "example1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE1@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "$2a$11$qu.zj.B7E7zgP17og/FQFOg7C.e.de0OWwCcJce9XbWq3aFeee3rm",
                            PhoneNumber = "(99) 99999-9991",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0db1182-e044-4e52-9691-6517f48262cc",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(6035),
                            UserName = "john"
                        },
                        new
                        {
                            Id = new Guid("50bcda95-4cf4-454c-b886-ce08d3929274"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "146c186a-51c3-401c-8091-5bf75d4198de",
                            CreatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7678),
                            Email = "example2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE2@GMAIL.COM",
                            NormalizedUserName = "JANE",
                            PasswordHash = "$2a$11$PAu..Khf140CgmQqCwhKt.LTu/hcliLPTCefdRCO0MOqXi7oehaYG",
                            PhoneNumber = "(99) 99999-9992",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f53bef4-3765-4cd0-950f-3aa8baec904d",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7668),
                            UserName = "jane"
                        },
                        new
                        {
                            Id = new Guid("570ace98-c272-4fb1-bd7b-bf26e596a9e2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d798c955-e5ca-4ed8-a7ae-c191ee6687bc",
                            CreatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7681),
                            Email = "example3@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE3@GMAIL.COM",
                            NormalizedUserName = "ALICE",
                            PasswordHash = "$2a$11$EinxZS9Pw1jikW1i0jkw4eUNR.hGFnT/4/lGhotvWQ1lt1mqEXeT2",
                            PhoneNumber = "(99) 99999-9993",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fbe299d-b679-43b6-8323-46f24f0ce549",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7679),
                            UserName = "alice"
                        },
                        new
                        {
                            Id = new Guid("a424c16d-bae6-4bf2-ae15-9779b175f59d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ff6309c-a094-4515-a9f5-5a8df64707a9",
                            CreatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7683),
                            Email = "example4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE4@GMAIL.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "$2a$11$5Dz97oHDHVaIl8bcvUIsk.C0f73ABToNTfPsB7L64sMe8bK23U//O",
                            PhoneNumber = "(99) 99999-9994",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fa9df73-2c16-4738-a664-ec8c53d07e66",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7681),
                            UserName = "bob"
                        },
                        new
                        {
                            Id = new Guid("075db71d-f8e5-4196-bbe0-1bbbc46aa18d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bce13cd-881f-4f43-b4f8-45367ed40916",
                            CreatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7690),
                            Email = "example5@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Charlie",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "EXAMPLE5@GMAIL.COM",
                            NormalizedUserName = "CHARLIE",
                            PasswordHash = "$2a$11$GY3WszX8O4PPPALPJ5AUgeRMgbagjfCY7HCIltRaJBs.4zuEqp4fW",
                            PhoneNumber = "(99) 99999-9995",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da4e9388-9f83-48e5-b87d-e18abab4cc6f",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 8, 6, 15, 8, 1, 424, DateTimeKind.Local).AddTicks(7684),
                            UserName = "charlie"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3923a968-afad-4f2f-a90a-6c2aa814983a"),
                            ConcurrencyStamp = "42f1ad21-7fa4-4873-85f5-618b11a49e29",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b3745783-92f8-412b-9730-e9832876b842"),
                            ConcurrencyStamp = "79e7aac2-dcb6-4ae8-b9f5-804f3f8efc9b",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("b461d7d0-49d8-4aeb-a593-b34fb2b95c04"),
                            ConcurrencyStamp = "ea40ea13-55a8-49a8-9d07-fdd8c978caca",
                            Name = "Consultant",
                            NormalizedName = "CONSULTANT"
                        },
                        new
                        {
                            Id = new Guid("0565cf30-e4c8-4b99-ad24-a3e42f8c0669"),
                            ConcurrencyStamp = "9014d107-ac09-4dbc-9e99-7b0837e0961b",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("79dc683c-d307-40ec-9c15-990a70101193"),
                            ConcurrencyStamp = "73f188f8-db9e-4acf-a9c4-31977eff4b02",
                            Name = "Collaborator",
                            NormalizedName = "COLLABORATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f9d37fbd-8af5-42b3-9a5e-f2026f34fc79"),
                            RoleId = new Guid("3923a968-afad-4f2f-a90a-6c2aa814983a")
                        },
                        new
                        {
                            UserId = new Guid("50bcda95-4cf4-454c-b886-ce08d3929274"),
                            RoleId = new Guid("b3745783-92f8-412b-9730-e9832876b842")
                        },
                        new
                        {
                            UserId = new Guid("570ace98-c272-4fb1-bd7b-bf26e596a9e2"),
                            RoleId = new Guid("b461d7d0-49d8-4aeb-a593-b34fb2b95c04")
                        },
                        new
                        {
                            UserId = new Guid("a424c16d-bae6-4bf2-ae15-9779b175f59d"),
                            RoleId = new Guid("0565cf30-e4c8-4b99-ad24-a3e42f8c0669")
                        },
                        new
                        {
                            UserId = new Guid("075db71d-f8e5-4196-bbe0-1bbbc46aa18d"),
                            RoleId = new Guid("79dc683c-d307-40ec-9c15-990a70101193")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Analise", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Harvest", b =>
                {
                    b.HasOne("Core.Entities.Plot", null)
                        .WithMany()
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.NutrientTable", b =>
                {
                    b.HasOne("Core.Entities.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Plot", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
